/*!
 * ExtActiveTabState
 * Part of the ExtHelpers project
 * @version  v1.6.0
 * @author   Gerrproger
 * @license  MIT License
 * Repo:     http://github.com/gerrproger/ext-helpers
 * Issues:   http://github.com/gerrproger/ext-helpers/issues
 */
!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=t(e,document):"function"==typeof define&&define.amd?define(null,function(){t(e,document)}):e.ExtActiveTabState=t(e,document)}("undefined"!=typeof window?window:this,function(e,t){"use strict";class s{constructor(){return this.isBackgroundScript=!(!chrome.extension.getBackgroundPage||chrome.extension.getBackgroundPage()!==e),this.callbacksNoState=[],this.callbacks={default:[]},this.api={subscribe:this.subscribe.bind(this),unsubscribe:this.unsubscribe.bind(this)},this.isBackgroundScript?this._initBackground():this._initContent(),this.api}subscribe(e,t){return this._processSubscriptions("subscribe",t,e)}unsubscribe(e){return this._processSubscriptions("unsubscribe",e)}_processSubscriptions(t,s,i){if("subscribe"===t&&"function"!=typeof i&&this.isBackgroundScript)throw new Error("Callback should be a function!");if(s&&"string"!=typeof s&&(!this.isBackgroundScript||"boolean"!=typeof s))throw new Error(`Namespace should be a string${this.isBackgroundScript?" or a a boolean":""}!`);return!s&&this.isBackgroundScript?"subscribe"===t?(this.callbacksNoState.push(i),e.dispatchEvent(new CustomEvent("checkTab")),this.api):(this.callbacksNoState=[],this.api):(s="string"==typeof s?s:"default","subscribe"===t?(this.callbacks[s]?this.callbacks[s].push(i):this.callbacks[s]=[i],e.dispatchEvent(new CustomEvent("checkTab")),this.api):(this.callbacks[s]&&(this.callbacks[s]=[]),this.api))}_initBackground(){let t=null,s=null;const i=()=>{chrome.tabs.query({active:!0,lastFocusedWindow:!0},e=>{const i=e[0];i&&(s=i.windowId,i.id!==t&&(t=i.id,c(i)))})},c=t=>{Object.keys(this.callbacks).forEach(s=>{a(t,s,i=>{this.callbacks[s].forEach(s=>{s.call(e,t,i)})})}),this.callbacksNoState.forEach(s=>{s.call(e,t)})},a=(e,t,s)=>{chrome.tabs.sendMessage(e.id,{extActiveTabState:{namespace:t}},e=>{if(chrome.runtime.lastError)switch(s(),chrome.runtime.lastError.message){case"Could not establish connection. Receiving end does not exist.":case"The message port closed before a response was received.":return;default:throw new Error(chrome.runtime.lastError.message)}s(e.extActiveTabState.response)})};i(),chrome.tabs.onActivated.addListener(i),chrome.windows.onFocusChanged.addListener(i),chrome.tabs.onUpdated.addListener((e,t,i)=>{"complete"===t.status&&i.windowId===s&&i.active&&c(i)}),e.addEventListener("checkTab",()=>{t=null,i()}),chrome.tabs.onCreated.addListener(e=>{e.active&&(t=e.id)})}_initContent(){chrome.runtime.onMessage.addListener((t,s,i)=>{let c="default";if(!t.extActiveTabState)return;t.extActiveTabState.namespace&&(c=t.extActiveTabState.namespace);return i({extActiveTabState:{response:this.callbacks[c]?this.callbacks[c].reduce((t,s)=>{const i="function"==typeof s?s.call(e):s;return Object.assign(t,i)},{}):{}}}),!0})}}return s});